/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package contacttracing;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alessandro Palumbo
 */
public class newTest extends javax.swing.JFrame {
    
    DefaultTableModel model;
    /**
     * Creates new form newTest
     */
    public newTest() {
        initComponents();
        ViewPatient();
        ViewHospital();
        tSwab.setEnabled(false);
        tSerological.setEnabled(false);
        tDeceased.setEnabled(false);
        setIcon();
    }
    private void ViewHospital(){
    
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT H.idH,H.h_Name,L.City FROM Loc L JOIN Hospital H ON H.id_HL=L.idL";
       model = (DefaultTableModel) hospTable.getModel();
       model.setRowCount(0);
       try {
            conn = Database.getDefaultConnection();
              st = conn.prepareStatement(query);
              rs= st.executeQuery();
           
            while(rs.next()){ 
               String idh =rs.getString(1);
               String hname =rs.getString(2);
               String city = rs.getString(3);
               model.addRow(new Object[]{idh,hname,city});
                
            }
            st.close();
        } catch (SQLException ex) {
          Logger.getLogger(newTest.class.getName()).log(Level.SEVERE, null, ex);
        }      
   }
    
    private void ViewPatient(){
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT idP,p_Name,p_Surname FROM Patient ORDER BY idP";
       model = (DefaultTableModel) tabPatient.getModel();
       model.setRowCount(0);
      //model.fireTableDataChanged();
        try {
            conn = Database.getDefaultConnection();
              st = conn.prepareStatement(query);
              rs= st.executeQuery();
           
            while(rs.next()){ 
               String idP = rs.getString(1);
               String Nome =rs.getString(2);
               String Cognome = rs.getString(3);
               model.addRow(new Object[]{idP,Nome,Cognome});
                
            }
            st.close();
        } catch (SQLException ex) {
          Logger.getLogger(newTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public Boolean CheckDeath(int idp){
       boolean check = false;
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT d_Date FROM Patient WHERE idP=? AND d_Date IS NOT NULL";
       try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setInt(1,idp);
           rs = st.executeQuery();
         if(rs.next()){ 
             check = true;
         }
          st.close();
       } catch (SQLException ex) {
           Logger.getLogger(newPatient.class.getName()).log(Level.SEVERE, null, ex);
       } 
       return check;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        bCough = new javax.swing.JRadioButton();
        bFever = new javax.swing.JRadioButton();
        bDist = new javax.swing.JRadioButton();
        bFat = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabPatient = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        hospTable = new javax.swing.JTable();
        tInsert = new javax.swing.JButton();
        tDelete = new javax.swing.JButton();
        tSwab = new javax.swing.JButton();
        tSerological = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        tDeceased = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Sintomi");

        bCough.setText("Tosse");

        bFever.setText("Febbre");

        bDist.setText("Difficolta Respiratorie");

        bFat.setText("Spossatezza");

        tabPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "idP", "Nome", "Cognome"
            }
        ));
        jScrollPane1.setViewportView(tabPatient);

        hospTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "idH", "Nome", "Citta"
            }
        ));
        jScrollPane2.setViewportView(hospTable);

        tInsert.setText("Inserisci");
        tInsert.setBackground(new java.awt.Color(0, 102, 153));
        tInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tInsertActionPerformed(evt);
            }
        });

        tDelete.setText("Annulla");
        tDelete.setBackground(new java.awt.Color(204, 0, 0));
        tDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tDeleteActionPerformed(evt);
            }
        });

        tSwab.setText("Tampone");
        tSwab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSwabActionPerformed(evt);
            }
        });

        tSerological.setText("Sierologico");
        tSerological.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSerologicalActionPerformed(evt);
            }
        });

        jLabel2.setText("PAZIENTE");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel3.setText("OSPEDALE");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel4.setText("Data Visita");

        tDeceased.setText("Decesso");
        tDeceased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tDeceasedActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Info");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Logoff");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bFever)
                            .addComponent(bCough)
                            .addComponent(jLabel1)
                            .addComponent(bDist)
                            .addComponent(bFat)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tSwab, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tSerological, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(tInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(datePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tDeceased, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bCough)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bFever)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bDist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bFat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(tInsert)
                        .addGap(18, 18, 18)
                        .addComponent(tDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tSwab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tSerological)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tDeceased)))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tDeleteActionPerformed
       MainCT mc;
       mc = new MainCT(1);
       mc.setVisible(true);     
       dispose();
    }//GEN-LAST:event_tDeleteActionPerformed

    private void tInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tInsertActionPerformed
        boolean n = true;
        String date = datePicker1.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        int ip = 0;
        int ih = 0;
        int cough = 0;
        int fever = 0;
        int rDistress = 0;
        int fatigue = 0;
        int severityL;
        
        if(bCough.isSelected())
            cough = 1;
        if(bFever.isSelected())
            fever = 1;
        if(bDist.isSelected())
            rDistress = 1;
        if(bFat.isSelected())
            fatigue = 1;
        
        severityL = cough+fever+rDistress+fatigue;
        
        try{
            ip = Integer.parseInt(tabPatient.getValueAt(tabPatient.getSelectedRow(),0).toString());
            ih = Integer.parseInt(hospTable.getValueAt(hospTable.getSelectedRow(),0).toString());
        }
        catch(ArrayIndexOutOfBoundsException exc){
            JOptionPane.showMessageDialog(null, "Errore. Selezionare le righe da entrambe le tabelle.");
            n = false;
        }
        
        if(n) {
            if(CheckDeath(ip)){
                JOptionPane.showMessageDialog(null, "Errore. Il paziente e' deceduto.");
            }
            else {
            Connection conn;
            PreparedStatement st;
            String query = "INSERT INTO nVisit(date_V,v_Hospital,id_PV,Fever,Cough,r_Distress,Fatigue) VALUES (?,?,?,?,?,?,?)";
            try {
                conn = Database.getDefaultConnection();
                st = conn.prepareStatement(query);
                st.setDate(1,Date.valueOf(date));
                st.setInt(2,ih);
                st.setInt(3,ip);
                st.setInt(4,cough);
                st.setInt(5,fever);
                st.setInt(6,rDistress);
                st.setInt(7,fatigue);
                if(st.executeUpdate()>0){ 
                    tSwab.setEnabled(true);
                    tSerological.setEnabled(true);
                    tDeceased.setEnabled(true);
                if(severityL >= 3){
                    JOptionPane.showMessageDialog(null, "Visita inserita. Test consigliato: Tampone naso-faringeo");
                }
                else {
                    JOptionPane.showMessageDialog(null, "Visita inserita. Test consigliato: sierologico");
                }
            }
             st.close();
             } catch (SQLException ex) {
           Logger.getLogger(newTest.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_tInsertActionPerformed

    private void tSwabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSwabActionPerformed
        newSwab nsw;
        nsw = new newSwab();
        nsw.setVisible(true);
    }//GEN-LAST:event_tSwabActionPerformed

    private void tSerologicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSerologicalActionPerformed
        newSerological ns;
        ns = new newSerological();
        ns.setVisible(true);
    }//GEN-LAST:event_tSerologicalActionPerformed

    private void tDeceasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tDeceasedActionPerformed
        boolean n = true;
        String date = datePicker1.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        int ip = Integer.parseInt(tabPatient.getValueAt(tabPatient.getSelectedRow(),0).toString());
        
        try{
            ip = Integer.parseInt(tabPatient.getValueAt(tabPatient.getSelectedRow(),0).toString());
        }
        catch(ArrayIndexOutOfBoundsException exc){
            JOptionPane.showMessageDialog(null, "Errore. Selezionare relativa al paziente.");
            n = false;
        }
        if(n) {
            if(CheckDeath(ip)){
                JOptionPane.showMessageDialog(null, "Errore. Il paziente e' gia' deceduto.");
            }
            else {
            Connection conn;
            PreparedStatement st;
            String query = "UPDATE Patient SET d_Date=? WHERE idP=?";
            try {
                conn = Database.getDefaultConnection();
                st = conn.prepareStatement(query);
                st.setDate(1,Date.valueOf(date));
                st.setInt(2,ip);
                if(st.executeUpdate()>0){ 
                    JOptionPane.showMessageDialog(null, "Decesso confermato. Data del decesso: "+date);
                    }
                     st.close();
            } catch (SQLException ex) {
                Logger.getLogger(newTest.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_tDeceasedActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this,
            "Contact Tracer\nApplicativo Java per emulare il Tracking del virus Sars-CoV-2"
            + "\nUniversità di Napoli Federico II"
            + "\n\nSviluppatore: Alessandro Palumbo N86001990 ",
            "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconcov.jpg")));
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bCough;
    private javax.swing.JRadioButton bDist;
    private javax.swing.JRadioButton bFat;
    private javax.swing.JRadioButton bFever;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JTable hospTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton tDeceased;
    private javax.swing.JButton tDelete;
    private javax.swing.JButton tInsert;
    private javax.swing.JButton tSerological;
    private javax.swing.JButton tSwab;
    private javax.swing.JTable tabPatient;
    // End of variables declaration//GEN-END:variables
}
