/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package contacttracing;

import java.awt.Toolkit;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Alessandro Palumbo
 */
public class newPatient extends javax.swing.JFrame {
    DefaultTableModel model;
    /**
     * Creates new form newPatient
     */
    public newPatient() {
        initComponents();
        ViewPatient();
        setIcon();
        jM.setSelected(true);
    }
    
    private void ViewPatient(){
    
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT idP,p_Name,p_Surname,b_Date,Gender,Phone,eMail FROM Patient";
       model = (DefaultTableModel) jPatientTable.getModel();
       model.setRowCount(0);
        try {
            conn = Database.getDefaultConnection();
              st = conn.prepareStatement(query);
              rs= st.executeQuery();
           
            while(rs.next()){ 
               String idP = rs.getString(1);
               String name =rs.getString(2);
               String surname = rs.getString(3);
               String dn = rs.getString(4);
               String sex = rs.getString(5);
               String phone = rs.getString(6);
               String mail = rs.getString(7);
               model.addRow(new Object[]{idP,name,surname,dn,sex,phone,mail});
                
            }
            st.close();
        } catch (SQLException ex) {
          Logger.getLogger(newLoc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public Boolean CheckMail(String mail){
       boolean check = false;
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT * FROM Patient WHERE eMail=?";
       try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setString(1,mail);
           rs= st.executeQuery();
         if(rs.next()){ 
             check = true;
         }
          st.close();
       } catch (SQLException ex) {
           Logger.getLogger(newPatient.class.getName()).log(Level.SEVERE, null, ex);
       } 
       return check;
   }
    
    public Boolean CheckCell(String cell){
       boolean check = false;
       PreparedStatement st;
       Connection conn;
       ResultSet rs;
       String query = " SELECT * FROM Patient WHERE Phone=?";
       try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setString(1,cell);
           rs= st.executeQuery();
         if(rs.next()){ 
             check = true;
         }
          st.close();
       } catch (SQLException ex) {
           Logger.getLogger(newPatient.class.getName()).log(Level.SEVERE, null, ex);
       } 
       return check;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nName = new javax.swing.JTextField();
        nSurname = new javax.swing.JTextField();
        nCell = new javax.swing.JTextField();
        nMail = new javax.swing.JTextField();
        nCity = new javax.swing.JTextField();
        nStreet = new javax.swing.JTextField();
        nNumber = new javax.swing.JTextField();
        nCAP = new javax.swing.JTextField();
        jInsert = new javax.swing.JButton();
        jBack = new javax.swing.JButton();
        jM = new javax.swing.JRadioButton();
        jF = new javax.swing.JRadioButton();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        jUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPatientTable = new javax.swing.JTable();
        jDelete = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel2.setText("Cognome");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel3.setText("Data di nascita");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel4.setText("Sesso");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel5.setText("Cellulare");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel6.setText("eMail");
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel7.setText("Citta");
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel8.setText("Via");
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel9.setText("N");
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel10.setText("CAP");
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        nName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nNameActionPerformed(evt);
            }
        });

        nSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nSurnameActionPerformed(evt);
            }
        });

        nCell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCellActionPerformed(evt);
            }
        });

        nMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nMailActionPerformed(evt);
            }
        });

        nCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCityActionPerformed(evt);
            }
        });

        nStreet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nStreetActionPerformed(evt);
            }
        });

        nNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nNumberActionPerformed(evt);
            }
        });

        nCAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCAPActionPerformed(evt);
            }
        });

        jInsert.setText("Aggiungi");
        jInsert.setBackground(new java.awt.Color(0, 102, 153));
        jInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertActionPerformed(evt);
            }
        });

        jBack.setText("Annulla");
        jBack.setBackground(new java.awt.Color(204, 0, 0));
        jBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackActionPerformed(evt);
            }
        });

        jM.setText("M");

        jF.setText("F");

        jUpdate.setText("Aggiorna");
        jUpdate.setBackground(new java.awt.Color(0, 51, 0));
        jUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateActionPerformed(evt);
            }
        });

        jPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "idP", "Nome", "Cognome", "Data N", "Sesso", "Cellulare", "eMail"
            }
        ));
        jScrollPane1.setViewportView(jPatientTable);

        jDelete.setText("Elimina");
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Info");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Logoff");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(76, 76, 76)
                        .addComponent(nMail))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54)
                        .addComponent(nCell))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(79, 79, 79)
                        .addComponent(jM)
                        .addGap(18, 18, 18)
                        .addComponent(jF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(datePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(72, 72, 72)
                        .addComponent(nName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(51, 51, 51)
                        .addComponent(nSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nNumber)
                    .addComponent(nStreet)
                    .addComponent(nCity)
                    .addComponent(nCAP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jBack, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jInsert))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(31, 31, 31))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(nName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(nSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(nStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(nNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(nCAP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jM)
                    .addComponent(jF))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(nCell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jInsert)
                            .addComponent(jUpdate))))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBack)
                    .addComponent(jDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nCAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCAPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nCAPActionPerformed

    private void nNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nNameActionPerformed

    private void nSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nSurnameActionPerformed

    private void nCellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nCellActionPerformed

    private void nMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nMailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nMailActionPerformed

    private void nCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nCityActionPerformed

    private void nStreetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nStreetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nStreetActionPerformed

    private void nNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nNumberActionPerformed

    private void jInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertActionPerformed
       String date = datePicker1.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
       String tdate = "TO_DATE('"+ date +"','YYYY-MM-DD')";
       
       String name = nName.getText();
       String surname = nSurname.getText();
       String mail = nMail.getText();
       String nation = "Italia";
       String type = "Indoor";
       String cell = nCell.getText();
       String city = nCity.getText();
       String street = nStreet.getText();
       int nstreet = Integer.parseInt(nNumber.getText());
       int pcode = Integer.parseInt(nCAP.getText());
       String sex = new String();
       
       if(jM.isSelected())
            sex = "M";
       else
            sex = "F";
       
       if(name.equals("") || surname.equals("") || mail.equals("") || cell.equals("") ||
          street.equals("") || city.equals("")){
           JOptionPane.showMessageDialog(null, "Errore. Compilare tutti i campi.");
       }
       else 
        {
           if(CheckMail(mail)){
           JOptionPane.showMessageDialog(null, "Indirizzo eMail giá presente nel database.");
       }
        else
               {
           if(CheckCell(cell)){
           JOptionPane.showMessageDialog(null, "Numero di cellulare giá presente nel database.");
       }
        else {
            PreparedStatement st;
            Connection conn;
            String query = "INSERT INTO Residence(City,Street,S_Number,l_Type,p_Code,Nation,p_Name,p_Surname,b_Date,Gender,Phone,eMail)"
                    + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
        try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setString(1,city);
           st.setString(2,street);
           st.setInt(3,nstreet);
           st.setString(4,type);
           st.setInt(5,pcode);
           st.setString(6,nation);
           st.setString(7,name);
           st.setString(8,surname);
           st.setDate(9,Date.valueOf(date));
           st.setString(10,sex);
           st.setString(11,cell);
           st.setString(12,mail);
           if(st.executeUpdate()>0){ 
            JOptionPane.showMessageDialog(null, "Nuovo paziente inserito con successo.");
            ViewPatient();
         }
             st.close();
             } catch (SQLException ex) {
           Logger.getLogger(newPatient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

             }
         }
    }//GEN-LAST:event_jInsertActionPerformed

    private void jBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackActionPerformed
       MainCT an;
       an = new MainCT(1);
       an.setVisible(true);     
       dispose();
    }//GEN-LAST:event_jBackActionPerformed

    private void jUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateActionPerformed
        int idp = 0;
        boolean n = true;
        String date = datePicker1.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String tdate = "TO_DATE('"+ date +"','YYYY-MM-DD')";
        String name = nName.getText();
        String surname = nSurname.getText();
        String mail = nMail.getText();
        String phone = nCell.getText();
        String city = nCity.getText();
        String street = nStreet.getText();
        String sex = new String();
        
        if(jM.isSelected())
            sex = "M";
        else
            sex = "F";
        
        try{
            idp = Integer.parseInt(jPatientTable.getValueAt(jPatientTable.getSelectedRow(),0).toString());
        }
        catch(ArrayIndexOutOfBoundsException exc){
            JOptionPane.showMessageDialog(null, "Errore. Selezionare la riga da aggiornare.");
            n = false;
        }
        
        if(n){
            if(name.equals("") || surname.equals("") || mail.equals("") || phone.equals("") ||
               !street.equals("") || !city.equals("")){
                    JOptionPane.showMessageDialog(null, "Errore. Compilare esclusivamente i campi paziente.");
            }
        else {
            PreparedStatement st;
            Connection conn;
            String query = "UPDATE Patient SET p_Name=?,p_Surname=?,b_Date=?,Gender=?,Phone=?,eMail=? WHERE idP=?";
        try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setString(1,name);
           st.setString(2,surname);
           st.setDate(3,Date.valueOf(date));
           st.setString(4,sex);
           st.setString(5,phone);
           st.setString(6,mail);
           st.setInt(7,idp);
           if(st.executeUpdate()>0){ 
            JOptionPane.showMessageDialog(null, "Paziente aggiornato correttamente.");
            ViewPatient();
         }
             st.close();
             } catch (SQLException ex) {
           Logger.getLogger(newLoc.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jUpdateActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
        int idp = 0;
        boolean n = true;
        try{
            idp = Integer.parseInt(jPatientTable.getValueAt(jPatientTable.getSelectedRow(),0).toString());
        }
        catch(ArrayIndexOutOfBoundsException exc){
            JOptionPane.showMessageDialog(null, "Errore. Selezionare la riga del paziente da eliminare.");
            n = false;
        }
        
        if(n){
            PreparedStatement st;
            Connection conn;
            String query = "DELETE FROM Patient WHERE idP=?";
        try {
           conn = Database.getDefaultConnection();
           st = conn.prepareStatement(query);
           st.setInt(1,idp);
           if(st.executeUpdate()>0){ 
            JOptionPane.showMessageDialog(null, "Paziente eliminato correttamente.");
            ViewPatient();
         }
             st.close();
             } catch (SQLException ex) {
           Logger.getLogger(newLoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this,
            "Contact Tracer\nApplicativo Java per emulare il Tracking del virus Sars-CoV-2"
            + "\nUniversità di Napoli Federico II"
            + "\n\nSviluppatore: Alessandro Palumbo N86001990 ",
            "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconcov.jpg")));
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JButton jBack;
    private javax.swing.JButton jDelete;
    private javax.swing.JRadioButton jF;
    private javax.swing.JButton jInsert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jM;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTable jPatientTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jUpdate;
    private javax.swing.JTextField nCAP;
    private javax.swing.JTextField nCell;
    private javax.swing.JTextField nCity;
    private javax.swing.JTextField nMail;
    private javax.swing.JTextField nName;
    private javax.swing.JTextField nNumber;
    private javax.swing.JTextField nStreet;
    private javax.swing.JTextField nSurname;
    // End of variables declaration//GEN-END:variables
}
